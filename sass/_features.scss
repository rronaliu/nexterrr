.features {
    grid-column: center-start / center-end;

    margin: 15rem 0;

    display: grid;  // we want this "feature" to also be a container so thats what we do. Like in flexbox where a flexitem can easily become a flex container
    //grid-template-columns: repeat(3, 1fr);
    grid-template-columns: repeat(auto-fit, minmax(25rem, 1fr));
    grid-gap: 6rem;
    align-items: start;
}

.feature {

    display: grid;
    grid-template-columns: min-content 1fr;     //in real world scenarios we usually just define the columns. The content defines the rows. 
    grid-row-gap: 1.5rem;
    grid-column-gap: 2.5rem;

    &__icon {
        fill: $color-primary;
        width: 4.5rem;
        height: 4.5rem;
        grid-row: 1 / span 2; // -1 i bjen the end of the explicit grid not the end of the grid
        transform: translateY(-1rem);
    }

    &__text {
        font-size: 1.7rem;
    }
}